import re
import requests
from bs4 import BeautifulSoup
from deep_translator import GoogleTranslator
import pandas as pd
import os
import shutil
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()


# ====== Config from .env ======
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")
ANKI_BASE_FOLDER = os.getenv("ANKI_BASE_FOLDER")
IMAGES_FOLDER = os.getenv("IMAGES_FOLDER", "images")
AUDIOS_FOLDER = os.getenv("AUDIOS_FOLDER", "audios")

# ------------------------
def get_ipa_and_pos_cambridge(word):
    try:
        url = f"https://dictionary.cambridge.org/us/dictionary/english/{word}"
        headers = {"User-Agent": "Mozilla/5.0"}
        resp = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(resp.text, "html.parser")

        ipa_span = soup.find("span", class_="ipa")
        ipa_text = f"/{ipa_span.text.strip()}/" if ipa_span else None

        pos_span = soup.find("span", class_="pos dpos")
        pos_text = pos_span.text.strip().lower() if pos_span else None

        # Generate audio using gtts
        audio_file = ""
        try:
            audios_folder = AUDIOS_FOLDER
            if not os.path.exists(audios_folder):
                os.makedirs(audios_folder)
            audio_file = os.path.join(audios_folder, f"{word.replace(' ', '_')}.mp3")
            from gtts import gTTS
            tts = gTTS(text=word, lang='en')
            tts.save(audio_file)
        except Exception as e:
            print(f"‚ùå Error generating audio with gtts: {e}")
            audio_file = ""

        pos_map = {
            "noun": "(n)",
            "verb": "(v)",
            "adjective": "(adj)",
            "adverb": "(adv)",
            "pronoun": "(pron)",
            "preposition": "(prep)",
            "conjunction": "(conj)",
            "determiner": "(det)",
            "exclamation": "(excl)"
        }

        # For phrases: if IPA is missing or looks like only one word, use IPA from each word instead
        if " " in word:
            phrase_word_count = len(word.split())
            ipa_word_count = len(re.findall(r"/[^/]+/", ipa_text)) if ipa_text else 0
            if not ipa_text or ipa_word_count < phrase_word_count:
                words = word.split()
                ipa_list = []
                pos_list = []
                for w in words:
                    ipa, pos, _ = get_ipa_and_pos_cambridge(w)
                    ipa_list.append(ipa)
                    pos_list.append(pos)
                merged_ipa = " ".join(ipa_list)
                merged_pos = ", ".join(set(pos_list))
                # Always use phrase audio (gtts) for phrases
                return merged_ipa, merged_pos, audio_file
        vi_pos = pos_map.get(pos_text, "(kh√°c)") if pos_text else "(kh√°c)"
        return ipa_text if ipa_text else "(kh√¥ng t√¨m th·∫•y IPA)", vi_pos, audio_file
    except Exception as e:
        print(f"[‚ùå IPA/POS] {word}: {e}")
        return "(l·ªói IPA)", "kh√°c", ""

# ------------------------
# D·ªãch nghƒ©a ti·∫øng Vi·ªát
# ------------------------
def translate_to_vietnamese(text):
    try:
        return GoogleTranslator(source='en', target='vi').translate(text)
    except Exception as e:
        print(f"[‚ùå D·ªãch] {text}: {e}")
        return "(l·ªói d·ªãch)"

# ------------------------
# T·∫£i ·∫£nh t·ª´ Unsplash
# ------------------------
def download_unsplash_image(query):
    try:
        if not os.path.exists(IMAGES_FOLDER):
            os.makedirs(IMAGES_FOLDER)

        url = f"https://api.unsplash.com/search/photos?query={query}&client_id={UNSPLASH_ACCESS_KEY}&per_page=1"
        resp = requests.get(url, timeout=10)
        data = resp.json()

        if data.get("results"):
            image_url = data["results"][0]["urls"]["regular"]
            image_data = requests.get(image_url).content

            file_name = f"{query}.jpg"
            file_path = os.path.join(IMAGES_FOLDER, file_name)
            with open(file_path, "wb") as f:
                f.write(image_data)
            return file_name
        else:
            return ""
    except:
        return ""

# ------------------------
def read_unique_words_from_text(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        text = f.read().lower()

    phrases = re.findall(r"'([^']+)'", text)  # l·∫•y c·ª•m t·ª´ trong d·∫•u '
    for p in phrases:
        text = text.replace(f"'{p}'", "")  # xo√° kh·ªèi text g·ªëc ƒë·ªÉ kh√¥ng split ti·∫øp

    words = re.findall(r'\b[a-zA-Z]+\b', text)  # c√°c t·ª´ l·∫ª
    all_terms = set(words + phrases)  # g·ªôp & lo·∫°i tr√πng
    return all_terms

# ------------------------
# X·ª≠ l√Ω to√†n b·ªô t·ª´ v√† xu·∫•t Excel
# ------------------------
def option1_generate_words_per_space(input_txt, output_excel):
    words = read_unique_words_from_text(input_txt)
    data = []
    for word in words:
        ipa, pos, _ = get_ipa_and_pos_cambridge(word)  # Do not generate audio here
        vi = translate_to_vietnamese(word)
        print(f"{word:<15} | {ipa:<18} | {pos:<10} | {vi}")
        data.append({
            'word': word,
            'pos': pos,
            'ipa': ipa,
            'ti·∫øng Vi·ªát': vi
        })
    pd.DataFrame(data).to_excel(output_excel, index=False, engine='openpyxl')
    print(f"‚úÖ ƒê√£ t·∫°o file Excel: {output_excel}")
# ------------------------
# X·ª≠ l√Ω t·ª´ng d√≤ng v√† xu·∫•t Excel (m·ªói d√≤ng l√† 1 t·ª´/c·ª•m t·ª´)
# ------------------------
def option2_generate_words_per_line(input_txt, output_excel):
    with open(input_txt, 'r', encoding='utf-8') as f:
        lines = [line.strip() for line in f if line.strip()]
    data = []
    for word in lines:
        ipa, pos, _ = get_ipa_and_pos_cambridge(word)
        vi = translate_to_vietnamese(word)
        print(f"{word:<15} | {ipa:<18} | {pos:<10} | {vi}")
        data.append({
            'word': word,
            'pos': pos,
            'ipa': ipa,
            'ti·∫øng Vi·ªát': vi
        })
    pd.DataFrame(data).to_excel(output_excel, index=False, engine='openpyxl')
    print(f"‚úÖ ƒê√£ t·∫°o file Excel: {output_excel}")
# ------------------------
# Option 3: ƒê·ªçc Excel, t·∫£i ·∫£nh, xu·∫•t CSV cho Anki
# ------------------------
def option3_add_images(input_excel, output_csv):
    df = pd.read_excel(input_excel, engine='openpyxl')
    img_tags = []
    audio_tags = []

    for idx, row in df.iterrows():
        word = row['word']
        img_file = download_unsplash_image(word)
        if img_file:
            img_tags.append(f'<img src="{img_file}">')
        else:
            img_tags.append("")
        # Generate audio here using gtts
        try:
            audios_folder = AUDIOS_FOLDER
            if not os.path.exists(audios_folder):
                os.makedirs(audios_folder)
            audio_file = os.path.join(audios_folder, f"{word.replace(' ', '_')}.mp3")
            from gtts import gTTS
            tts = gTTS(text=word, lang='en')
            tts.save(audio_file)
            audio_tags.append(f'[sound:{os.path.basename(audio_file)}]')
        except Exception as e:
            print(f"‚ùå Error generating audio with gtts: {e}")
            audio_tags.append("")

    df['image_html'] = img_tags
    df['audio'] = audio_tags

    # Ensure 'audio' is the last column
    cols = list(df.columns)
    if 'audio' in cols:
        cols = [c for c in cols if c != 'audio'] + ['audio']
        df = df[cols]

    import csv
    df.to_csv(output_csv, index=False, encoding='utf-8-sig', header=False, sep='\t', quoting=csv.QUOTE_NONE, escapechar='\\')
    print(f"‚úÖ CSV cho Anki: {output_csv}")
    print(f"üìÇ ·∫¢nh ƒë√£ l∆∞u trong th∆∞ m·ª•c: {IMAGES_FOLDER}")

# ------------------------
def option4_copy_images_to_anki():
    anki_path = Path(os.path.expandvars(ANKI_BASE_FOLDER))
    if not anki_path.exists():
        print("‚ö†Ô∏è ƒê∆∞·ªùng d·∫´n Anki kh√¥ng t·ªìn t·∫°i.")
        return

    profiles = [p.name for p in anki_path.iterdir() if p.is_dir() and not p.name.startswith(".") and not p.name.startswith("addon")]
    if not profiles:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y profile n√†o.")
        return

    print("\nDanh s√°ch profile:")
    for i, p in enumerate(profiles, 1):
        print(f"{i}. {p}")

    try:
        choice = int(input("Ch·ªçn s·ªë profile: "))
        profile_name = profiles[choice - 1]
    except:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        return

    media_path = anki_path / profile_name / "collection.media"
    if not media_path.exists():
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c collection.media.")
        return

    # Copy images
    if not os.path.exists(IMAGES_FOLDER):
        print("‚ö†Ô∏è Th∆∞ m·ª•c ·∫£nh ch∆∞a t·ªìn t·∫°i. H√£y ch·∫°y Option 2 tr∆∞·ªõc.")
    else:
        for img_file in os.listdir(IMAGES_FOLDER):
            src = os.path.join(IMAGES_FOLDER, img_file)
            dst = os.path.join(media_path, img_file)
            shutil.copy2(src, dst)
            print(f"üìÇ Copy {img_file} -> {media_path}")
        print("‚úÖ ƒê√£ copy to√†n b·ªô ·∫£nh v√†o collection.media.")

    # Copy audio files
    
    # Copy images
    if not os.path.exists(AUDIOS_FOLDER):
        print("‚ö†Ô∏è Th∆∞ m·ª•c audio ch∆∞a t·ªìn t·∫°i. H√£y ch·∫°y Option 2 tr∆∞·ªõc.")
    else:
        for audio_file in os.listdir(AUDIOS_FOLDER):
            src = os.path.join(AUDIOS_FOLDER, audio_file)
            dst = os.path.join(media_path, audio_file)
            shutil.copy2(src, dst)
            print(f"üìÇ Copy {audio_file} -> {media_path}")
        print("‚úÖ ƒê√£ copy to√†n b·ªô audio v√†o collection.media.")

# ------------------------
if __name__ == "__main__":
    while True:
        print("\nCh·ªçn ch·∫ø ƒë·ªô:")
        print("1: L·∫•y t·ª´ v·ª±ng t·ª´ ƒëo·∫°n vƒÉn")
        print("2: L·∫•y t·ª´ v·ª±ng theo t·ª´ng d√≤ng")
        print("3: T·∫£i ·∫£nh & CSV Anki")
        print("4: Copy ·∫£nh/audio v√†o Anki")
        print("5: Tho√°t ·ª©ng d·ª•ng")
        mode = input("Nh·∫≠p s·ªë ch·∫ø ƒë·ªô (1-5): ").strip()
        if mode == "1":
            option1_generate_words_per_space("input.txt", "output.xlsx")
        elif mode == "2":
            option2_generate_words_per_line("input.txt", "output.xlsx")
        elif mode == "3":
            option3_add_images("output.xlsx", "output_with_images.csv")
        elif mode == "4":
            option4_copy_images_to_anki()
        elif mode == "5":
            print("üëã ƒê√£ tho√°t ·ª©ng d·ª•ng.")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
